#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var serverapp = app.server;
var clientapp = app.client;

var debug = require('debug')('mern-redux-simple-template:server');
var http = require('http');

var prod = process.env.env === "PRODUCTION";
/**
 * Get port from environment and store in Express.
 */

var serverport = normalizePort(process.env.PORT || '3001');
serverapp.set('port', serverport);
if (prod) {
  var clientport = normalizePort('3000');
  clientapp.set('port', clientport);
}
/**
 * Create HTTP server and client.
 */

var server = http.createServer(serverapp);
if (prod) {
  var client = http.createServer(clientapp);
}
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(serverport);
server.on('error', onError);
server.on('listening', onListening);
if (prod) {
  client.listen(clientport);
  client.on('error', onError);
  client.on('listening', onListening);
}
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof serverport === 'string'
    ? 'Pipe ' + serverport
    : 'Port ' + serverport;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
